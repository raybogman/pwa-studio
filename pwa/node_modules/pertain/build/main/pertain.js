"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const ExplicitDependencySet_1 = __importDefault(require("./ExplicitDependencySet"));
const PackageJson_1 = __importDefault(require("./PackageJson"));
const resolverFactory_1 = __importDefault(require("./resolverFactory"));
const debug = debug_1.default('pertain:main');
const depsAndDevDeps = (pkg) => {
    // Merging the two dependency sets that we look at will dedupe them.
    // We don't care whether it comes from devDependencies or dependencies.
    // Both are relevant, because many applications with a build step compile
    // code from devDependencies.
    const allDependencyNames = Object.keys(Object.assign(Object.assign({}, pkg.dependencies), pkg.devDependencies));
    allDependencyNames.push('./'); // rootDir too
    return allDependencyNames;
};
/**
 * Caches the ExplicitDependencySet calculated for a given project root.
 * It should not change during the lifetime of this process, so there's no
 * point in recalculating it.
 */
const dependencySetCache = new Map();
/**
 * Query the direct dependencies of the Node project at `rootDir` for all
 * packages which have a particular `package.json` property. Return them in
 * peerDependency order.
 */
function pertain(rootDir, subject, getDependencies = (found) => found) {
    let depSet = dependencySetCache.get(rootDir);
    if (!depSet) {
        debug('no cached depset for %s', rootDir);
        // A convenience function which can be replaced with an alternate resolver
        // algorithm.
        const resolve = resolverFactory_1.default(rootDir);
        const packageJson = new PackageJson_1.default(rootDir);
        const allDependencyNames = getDependencies(depsAndDevDeps(packageJson), packageJson, rootDir, subject);
        debug('%s allDependencyNames %s', rootDir, allDependencyNames);
        depSet = new ExplicitDependencySet_1.default(resolve, allDependencyNames);
        dependencySetCache.set(rootDir, depSet);
    }
    return depSet.pertaining(subject).map((dep) => ({
        name: dep.name,
        modulePath: dep.modulePath,
        path: dep.pertains(subject),
        subject,
    }));
}
/**
 * Clear out the cache of dependencies that have already been detected and
 * loaded. Use if the dependency graph changes and you want to "hot reload"
 * functionality. Or, for testing.
 */
pertain.clearCache = () => dependencySetCache.clear();
exports.default = pertain;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVydGFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wZXJ0YWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsa0RBQThCO0FBQzlCLG9GQUE0RDtBQUM1RCxnRUFBd0M7QUFDeEMsd0VBQXlDO0FBRXpDLE1BQU0sS0FBSyxHQUFHLGVBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQVN4QyxNQUFNLGNBQWMsR0FBRyxDQUFDLEdBQWdCLEVBQVksRUFBRTtJQUNwRCxvRUFBb0U7SUFDcEUsdUVBQXVFO0lBQ3ZFLHlFQUF5RTtJQUN6RSw2QkFBNkI7SUFDN0IsTUFBTSxrQkFBa0IsR0FBRyxNQUFNLENBQUMsSUFBSSxpQ0FDakMsR0FBRyxDQUFDLFlBQVksR0FDaEIsR0FBRyxDQUFDLGVBQWUsRUFDdEIsQ0FBQztJQUNILGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGNBQWM7SUFDN0MsT0FBTyxrQkFBa0IsQ0FBQztBQUM1QixDQUFDLENBQUM7QUErQkY7Ozs7R0FJRztBQUNILE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxHQUFHLEVBQWlDLENBQUM7QUFFcEU7Ozs7R0FJRztBQUNILFNBQVMsT0FBTyxDQUNkLE9BQWUsRUFDZixPQUFlLEVBQ2Ysa0JBQW9DLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLO0lBRXBELElBQUksTUFBTSxHQUFHLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM3QyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ1gsS0FBSyxDQUFDLHlCQUF5QixFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzFDLDBFQUEwRTtRQUMxRSxhQUFhO1FBQ2IsTUFBTSxPQUFPLEdBQUcseUJBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNsQyxNQUFNLFdBQVcsR0FBRyxJQUFJLHFCQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDN0MsTUFBTSxrQkFBa0IsR0FBRyxlQUFlLENBQ3hDLGNBQWMsQ0FBQyxXQUFXLENBQUMsRUFDM0IsV0FBVyxFQUNYLE9BQU8sRUFDUCxPQUFPLENBQ1IsQ0FBQztRQUNGLEtBQUssQ0FBQywwQkFBMEIsRUFBRSxPQUFPLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztRQUMvRCxNQUFNLEdBQUcsSUFBSSwrQkFBcUIsQ0FBQyxPQUFPLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztRQUNoRSxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQ3pDO0lBQ0QsT0FBTyxNQUFNLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM5QyxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUk7UUFDZCxVQUFVLEVBQUUsR0FBRyxDQUFDLFVBQVU7UUFDMUIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFXO1FBQ3JDLE9BQU87S0FDUixDQUFDLENBQUMsQ0FBQztBQUNOLENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsT0FBTyxDQUFDLFVBQVUsR0FBRyxHQUFHLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUV0RCxrQkFBZSxPQUFPLENBQUMifQ==